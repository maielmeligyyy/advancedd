#include <iostream>
#include <vector>

using namespace std;

class TreeNode {
public:
    int val;
    vector<TreeNode*> children;

    TreeNode(int val) : val(val) {}
};

void printTree(TreeNode* root, int depth = 0) {
    if (root == nullptr) return;
    
    for (int i = 0; i < depth; ++i) {
        cout << "|--";  
    }
    cout << root->val << endl;
    
    for (TreeNode* child : root->children) {
        printTree(child, depth + 1);  
    }
}

bool areIsomorphic(TreeNode* T1, TreeNode* T2) {
    if (T1 == nullptr && T2 == nullptr)
        return true;
    if (T1 == nullptr || T2 == nullptr)
        return false;
    if (T1->val != T2->val)
        return false;
    if (T1->children.size() != T2->children.size())
        return false;
    
    for (int i = 0; i < T1->children.size(); ++i) {
        if (!areIsomorphic(T1->children[i], T2->children[i]))
            return false;
    }
    return true;
}

int main() {
    TreeNode* root1 = new TreeNode(1);
    root1->children.push_back(new TreeNode(2));
    root1->children.push_back(new TreeNode(3));

    TreeNode* root2 = new TreeNode(1);
    root2->children.push_back(new TreeNode(2));
    root2->children.push_back(new TreeNode(3));

    cout << "Tree 1:" << endl;
    printTree(root1);

    cout << "Tree 2:" << endl;
    printTree(root2);

    cout << "Are Trees Isomorphic: " << (areIsomorphic(root1, root2) ? "Yes" : "No") << endl;

    delete root1->children[0];
    delete root1->children[1];
    delete root1;
    delete root2->children[0];
    delete root2->children[1];
    delete root2;

    return 0;
}
